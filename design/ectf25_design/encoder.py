"""
Author: Garrick Schinkel
Date: 2025



"""

import argparse
import struct
import json
import gmpy2
from sympy import isprime
import time


def extended_gcd(a, b):
    """
    Extended Euclidean Algorithm to find GCD(a, b) and coefficients x, y such that ax + by = GCD(a, b).

    Args:
      a: First integer.
      b: Second integer.

    Returns:
      A tuple (g, x, y) where g is GCD(a, b) and x, y are coefficients.
    """
    if b == 0:
        return a, 1, 0
    else:
        g, x1, y1 = extended_gcd(b, a % b)
        x = y1
        y = x1 - (a // b) * y1
        return g, x, y

def fletcher32(bytes):
    a = list(bytes)
    b = [sum(a[:i])%65535 for i in range(len(a)+1)]
    return (sum(b) << 16) | max(b)

def powmod(a, b, modulus, prime_1, prime_2):
    b_red_1 = gmpy2.f_mod(b, prime_1 - 1)
    b_red_2 = gmpy2.f_mod(b, prime_2 - 1)
    q_inv = gmpy2.invert(prime_2, prime_1)
    m_1 = gmpy2.powmod(a, b_red_1, prime_1)
    m_2 = gmpy2.powmod(a, b_red_2, prime_2)
    sub = gmpy2.f_mod(q_inv*(m_1-m_2), prime_1)

    return gmpy2.f_mod(m_2 + (sub * prime_2), modulus)

# Gets bits 2 - (bit + 1)
def top_bits(n, bits):
    return n >> (gmpy2.bit_length(n) - bits + 1) & ((1 << bits) - 1)


def wind_encoder(root, target, exponents, modulus, p, q):
    result = root
    for section in range(64, -1, -1):
        mask = 1 << section
        times = (mask & target) >> section
        for i in range(times):
            if gmpy2.bit_length(result) > 128:
                result = powmod(exponents[section], top_bits(result, 128), modulus, p, q)
            else:
                result = powmod(exponents[section], result, modulus, p, q)
    return result

def get_primes_starting_with(start, amount): 
    primes = []
    i = start
    while len(primes) < amount:
        i += 2
        if isprime(i):
            primes.append(i)
    return primes
class Encoder:
    channel_cache = -1
    cache_mask = 0xfffffffffff00000 # This encoder caches 10 out of the 16 nibbles in a timestamp
    cached_timestamp = -1
    cached_forward = -1
    cached_backward = -1
    def __init__(self, secrets: bytes):
        """
        You **may not** change the arguments or returns of this function!

        :param secrets: Contents of the secrets file generated by
            ectf25_design.gen_secrets
        """
        # TODO: parse your secrets data here and run any necessary pre-processing to
        #   improve the throughput of Encoder.encode
        self.exponents = get_primes_starting_with(1025, 64)

        # Load the json of the secrets file
        secrets = json.loads(secrets)

        # Load the example secrets for use in Encoder.encode
        # This will be "EXAMPLE" in the reference design"
        self.secrets = secrets

    def encode(self, channel: int, frame: bytes, timestamp: int) -> bytes:
        """The frame encoder function

        This will be called for every frame that needs to be encoded before being
        transmitted by the satellite to all listening TVs

        You **may not** change the arguments or returns of this function!

        :param channel: 16b unsigned channel number. Channel 0 is the emergency
            broadcast that must be decodable by all channels.
        :param frame: Frame to encode. Max frame size is 64 bytes.
        :param timestamp: 64b timestamp to use for encoding. **NOTE**: This value may
            have no relation to the current timestamp, so you should not compare it
            against the current time. The timestamp is guaranteed to strictly
            monotonically increase (always go up) with subsequent calls to encode

        :returns: The encoded frame, which will be sent to the Decoder
        """
        # TODO: encode the satellite frames so that they meet functional and
        #  security requirements

        
        modulus = self.secrets[str(channel)]["modulus"]
        totient = (self.secrets[str(channel)]["p"] - 1) * (self.secrets[str(channel)]["q"] - 1)
        end_of_time = 2**64 - 1
        p = self.secrets[str(channel)]["p"]
        q = self.secrets[str(channel)]["q"]

        if self.channel_cache != channel or timestamp & self.cache_mask != self.cached_timestamp:
            # Break the timestamp into two parts
            self.cached_timestamp = timestamp & self.cache_mask
            self.channel_cache = channel
            self.cached_timestamp = timestamp
            forward_root = self.secrets[str(channel)]["forward"]
            backward_root = self.secrets[str(channel)]["backward"]


            self.cached_forward = wind_encoder(forward_root, self.cached_timestamp, self.exponents, modulus, p, q)
            self.cached_backward = wind_encoder(backward_root, (end_of_time - self.cached_timestamp) & self.cache_mask, self.exponents, modulus, p, q)

        extra = timestamp & ~self.cache_mask

        forward = wind_encoder(self.cached_forward, extra, self.exponents, modulus, p, q)
        backward = wind_encoder(self.cached_backward, (end_of_time & ~self.cache_mask) - extra, self.exponents, modulus, p, q)
        guard = forward ^ backward

        encoded = powmod(int.from_bytes(frame) ^ guard, self.secrets[str(channel)]["d"], modulus, p, q).to_bytes(128, byteorder="big")
        
        return struct.pack("<IQ", channel, timestamp) + encoded


def main():
    """A test main to one-shot encode a frame

    This function is only for your convenience and will not be used in the final design.

    After pip-installing, you should be able to call this with:
        python3 -m ectf25_design.encoder path/to/test.secrets 1 "frame to encode" 100
    """
    parser = argparse.ArgumentParser(prog="ectf25_design.encoder")
    parser.add_argument(
        "secrets", type=argparse.FileType("rb"), help="Path to the secrets file"
    )
    parser.add_argument("channel", type=int, help="Channel to encode for")
    parser.add_argument("frame", help="Contents of the frame")
    parser.add_argument("timestamp", type=int, help="64b timestamp to use")
    args = parser.parse_args()

    encoder = Encoder(args.secrets.read())
    #encoder = Encoder(open("/home/bruberu/ps/MITREeCTF/spark-ectf/secrets/secrets.json", "rb").read())
    repr(encoder.encode(args.channel, args.frame.encode(), args.timestamp + i))
    #frame = json.loads(open("/home/bruberu/ps/MITREeCTF/spark-ectf/frames/x_c0.json", "rb").read())[0][1].encode()
    #start = time.time()
    #for i in range(0, 1000000, 1000):
    #    starti = time.time()
    #    repr(encoder.encode(1, frame, i))
    #    endi = time.time() - starti
    #end = time.time() - start
    #print("Time taken: ", end)


if __name__ == "__main__":
    main()
